#!/usr/bin/python
PACKAGE = 'recognition'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add('override_threshold',      double_t, 0, 'the threshold for face detection confidence', 0.5, 0.0, 1.0)
gen.add('ground_estimation_mode', int_t, 0, 'ground estimatation modes: 0-3; 2 is automatic', 2) 
gen.add('remote_ground_selection', bool_t, 0, 'remote_ground_selection', True)
gen.add('read_ground_from_file', bool_t, 0, 'Flag stating if the ground should be read from file, if present:', True)
gen.add('lock_ground', bool_t, 0, 'Flag that locks the ground plane update:', True) 
gen.add('valid_points_threshold', double_t, 0, '//# Threshold on the ratio of valid points needed for ground estimation:', 0.0) 
gen.add('background_subtraction', bool_t, 0, '//# Flag enabling/disabling background subtraction:', True) 
gen.add('background_octree_resolution', double_t, 0, '//# Resolution of the octree representing the background:', 0.3) 
gen.add('background_seconds', double_t, 0, '//# Seconds to use to lear n the background:', 3.0)
gen.add('ground_based_people_detection_min_confidence', double_t, 0, '// Minimum detection confidence:', -5.0)
gen.add('minimum_person_height', double_t, 0, '// Minimum person height', 0.6)
gen.add('maximum_person_height', double_t, 0, '// Maximum person height', 2.3)
gen.add('max_distance', double_t, 0, '// Max depth range', 6.25)
gen.add('sampling_factor', int_t, 0, 'Point cloud downsampling factor', 4)
gen.add('use_rgb', bool_t, 0, 'Flag stating if classifiers based on RGB image should be used or not', True)
gen.add('minimum_luminance', int_t, 0, 'Threshold on image luminance. If luminance is over this threhsold, classifiers on RGB image are also used', 0) 
gen.add('sensor_tilt_compensation', bool_t, 0, 'If true, sensor tilt angle wrt ground plane is compensated to improve people detection', True)
gen.add('heads_minimum_distance', int_t, 0, 'Minimum distance between two persons', 0.3) 
gen.add('voxel_size', double_t, 0, 'Voxel size used to downsample the point cloud (lower = detection slower but more precise; higher = detection faster but less precise)', 0.06) 
gen.add('apply_denoising', bool_t, 0, 'Denoising flag. If true, a statistical filter is applied to the point cloud to remove noise', True) 
gen.add('mean_k_denoising', int_t, 0, ' MeanK for denoising (the higher it is, the stronger is the filtering)', 5)
gen.add('std_dev_denoising', double_t, 0, ' Standard deviation for denoising (the lower it is, the stronger is the filtering)', 0.3) 
gen.add('rate_value', double_t, 0, 'rate_value', 1.0) 
gen.add('ground_estimation_mode', int_t, 0, 'ground estimatation modes: 0-3; 2 is automatic', 2) 
gen.add('ground_estimation_mode', int_t, 0, 'ground estimatation modes: 0-3; 2 is automatic', 2) 
gen.add('ground_estimation_mode', int_t, 0, 'ground estimatation modes: 0-3; 2 is automatic', 2) 
exit(gen.generate(PACKAGE, 'recognition', 'GenDetection'))
